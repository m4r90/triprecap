{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { EventTypes, PointerType } from '../interfaces';\nimport EventManager from './EventManager';\nimport { isPointerInBounds } from '../utils';\nconst POINTER_CAPTURE_EXCLUDE_LIST = new Set(['SELECT', 'INPUT']);\nexport default class PointerEventManager extends EventManager {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"trackedPointers\", new Set());\n  }\n  setListeners() {\n    this.view.addEventListener('pointerdown', event => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      if (!isPointerInBounds(this.view, {\n        x: event.clientX,\n        y: event.clientY\n      })) {\n        return;\n      }\n      const adaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n      const target = event.target;\n      if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n        target.setPointerCapture(adaptedEvent.pointerId);\n      }\n      this.markAsInBounds(adaptedEvent.pointerId);\n      this.trackedPointers.add(adaptedEvent.pointerId);\n      if (++this.activePointersCounter > 1) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n        this.onPointerAdd(adaptedEvent);\n      } else {\n        this.onPointerDown(adaptedEvent);\n      }\n    });\n    this.view.addEventListener('pointerup', event => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      if (this.activePointersCounter === 0) {\n        return;\n      }\n      const adaptedEvent = this.mapEvent(event, EventTypes.UP);\n      const target = event.target;\n      if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n        target.releasePointerCapture(adaptedEvent.pointerId);\n      }\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.trackedPointers.delete(adaptedEvent.pointerId);\n      if (--this.activePointersCounter > 0) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n        this.onPointerRemove(adaptedEvent);\n      } else {\n        this.onPointerUp(adaptedEvent);\n      }\n    });\n    this.view.addEventListener('pointermove', event => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      const adaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n      const target = event.target;\n      if (!target.hasPointerCapture(event.pointerId) && !POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n        target.setPointerCapture(event.pointerId);\n      }\n      const inBounds = isPointerInBounds(this.view, {\n        x: adaptedEvent.x,\n        y: adaptedEvent.y\n      });\n      const pointerIndex = this.pointersInBounds.indexOf(adaptedEvent.pointerId);\n      if (inBounds) {\n        if (pointerIndex < 0) {\n          adaptedEvent.eventType = EventTypes.ENTER;\n          this.onPointerEnter(adaptedEvent);\n          this.markAsInBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerMove(adaptedEvent);\n        }\n      } else {\n        if (pointerIndex >= 0) {\n          adaptedEvent.eventType = EventTypes.LEAVE;\n          this.onPointerLeave(adaptedEvent);\n          this.markAsOutOfBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerOutOfBounds(adaptedEvent);\n        }\n      }\n    });\n    this.view.addEventListener('pointercancel', event => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      const adaptedEvent = this.mapEvent(event, EventTypes.CANCEL);\n      this.onPointerCancel(adaptedEvent);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.activePointersCounter = 0;\n      this.trackedPointers.clear();\n    });\n    this.view.addEventListener('pointerenter', event => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      const adaptedEvent = this.mapEvent(event, EventTypes.ENTER);\n      this.onPointerMoveOver(adaptedEvent);\n    });\n    this.view.addEventListener('pointerleave', event => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      const adaptedEvent = this.mapEvent(event, EventTypes.LEAVE);\n      this.onPointerMoveOut(adaptedEvent);\n    });\n    this.view.addEventListener('lostpointercapture', event => {\n      const adaptedEvent = this.mapEvent(event, EventTypes.CANCEL);\n      if (this.trackedPointers.has(adaptedEvent.pointerId)) {\n        this.onPointerCancel(adaptedEvent);\n        this.activePointersCounter = 0;\n        this.trackedPointers.clear();\n      }\n    });\n  }\n  mapEvent(event, eventType) {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: event.offsetX,\n      offsetY: event.offsetY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType: event.pointerType,\n      buttons: event.buttons,\n      time: event.timeStamp\n    };\n  }\n  resetManager() {\n    super.resetManager();\n    this.trackedPointers.clear();\n  }\n}","map":{"version":3,"names":["EventTypes","PointerType","EventManager","isPointerInBounds","POINTER_CAPTURE_EXCLUDE_LIST","Set","PointerEventManager","constructor","args","_defineProperty","setListeners","view","addEventListener","event","pointerType","TOUCH","x","clientX","y","clientY","adaptedEvent","mapEvent","DOWN","target","has","tagName","setPointerCapture","pointerId","markAsInBounds","trackedPointers","add","activePointersCounter","eventType","ADDITIONAL_POINTER_DOWN","onPointerAdd","onPointerDown","UP","releasePointerCapture","markAsOutOfBounds","delete","ADDITIONAL_POINTER_UP","onPointerRemove","onPointerUp","MOVE","hasPointerCapture","inBounds","pointerIndex","pointersInBounds","indexOf","ENTER","onPointerEnter","onPointerMove","LEAVE","onPointerLeave","onPointerOutOfBounds","CANCEL","onPointerCancel","clear","onPointerMoveOver","onPointerMoveOut","offsetX","offsetY","buttons","time","timeStamp","resetManager"],"sources":["C:\\Users\\rm200523\\OneDrive - Université Côte d'Azur\\Documents\\3annee\\triprecapApp\\triprecap\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\PointerEventManager.ts"],"sourcesContent":["import { AdaptedEvent, EventTypes, PointerType } from '../interfaces';\nimport EventManager from './EventManager';\nimport { isPointerInBounds } from '../utils';\n\nconst POINTER_CAPTURE_EXCLUDE_LIST = new Set<string>(['SELECT', 'INPUT']);\n\nexport default class PointerEventManager extends EventManager<HTMLElement> {\n  private trackedPointers = new Set<number>();\n\n  public setListeners(): void {\n    this.view.addEventListener('pointerdown', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      if (\n        !isPointerInBounds(this.view, { x: event.clientX, y: event.clientY })\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n      const target = event.target as HTMLElement;\n\n      if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n        target.setPointerCapture(adaptedEvent.pointerId);\n      }\n\n      this.markAsInBounds(adaptedEvent.pointerId);\n      this.trackedPointers.add(adaptedEvent.pointerId);\n\n      if (++this.activePointersCounter > 1) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n        this.onPointerAdd(adaptedEvent);\n      } else {\n        this.onPointerDown(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointerup', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      // When we call reset on gesture handlers, it also resets their event managers\n      // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n      // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n      // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n      if (this.activePointersCounter === 0) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.UP);\n      const target = event.target as HTMLElement;\n\n      if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n        target.releasePointerCapture(adaptedEvent.pointerId);\n      }\n\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.trackedPointers.delete(adaptedEvent.pointerId);\n\n      if (--this.activePointersCounter > 0) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n        this.onPointerRemove(adaptedEvent);\n      } else {\n        this.onPointerUp(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointermove', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n      const target = event.target as HTMLElement;\n\n      // You may be wondering why are we setting pointer capture here, when we\n      // already set it in `pointerdown` handler. Well, that's a great question,\n      // for which I don't have an answer. Specification (https://www.w3.org/TR/pointerevents2/#dom-element-setpointercapture)\n      // says that the requirement for `setPointerCapture` to work is that pointer\n      // must be in 'active buttons state`, otherwise it will fail silently, which\n      // is lovely. Obviously, when `pointerdown` is fired, one of the buttons\n      // (when using mouse) is pressed, but that doesn't mean that `setPointerCapture`\n      // will succeed, for some reason. Since it fails silently, we don't actually know\n      // if it worked or not (there's `gotpointercapture` event, but the complexity of\n      // incorporating it here seems stupid), so we just call it again here, every time\n      // pointer moves until it succeeds.\n      // God, I do love web development.\n      if (\n        !target.hasPointerCapture(event.pointerId) &&\n        !POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)\n      ) {\n        target.setPointerCapture(event.pointerId);\n      }\n\n      const inBounds: boolean = isPointerInBounds(this.view, {\n        x: adaptedEvent.x,\n        y: adaptedEvent.y,\n      });\n\n      const pointerIndex: number = this.pointersInBounds.indexOf(\n        adaptedEvent.pointerId\n      );\n\n      if (inBounds) {\n        if (pointerIndex < 0) {\n          adaptedEvent.eventType = EventTypes.ENTER;\n          this.onPointerEnter(adaptedEvent);\n          this.markAsInBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerMove(adaptedEvent);\n        }\n      } else {\n        if (pointerIndex >= 0) {\n          adaptedEvent.eventType = EventTypes.LEAVE;\n          this.onPointerLeave(adaptedEvent);\n          this.markAsOutOfBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerOutOfBounds(adaptedEvent);\n        }\n      }\n    });\n\n    this.view.addEventListener('pointercancel', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(\n        event,\n        EventTypes.CANCEL\n      );\n\n      this.onPointerCancel(adaptedEvent);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.activePointersCounter = 0;\n      this.trackedPointers.clear();\n    });\n\n    // onPointerEnter and onPointerLeave are triggered by a custom logic responsible for\n    // handling shouldCancelWhenOutside flag, and are unreliable unless the pointer is down.\n    // We therefore use pointerenter and pointerleave events to handle the hover gesture,\n    // mapping them to onPointerMoveOver and onPointerMoveOut respectively.\n\n    this.view.addEventListener('pointerenter', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.ENTER);\n\n      this.onPointerMoveOver(adaptedEvent);\n    });\n\n    this.view.addEventListener('pointerleave', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.LEAVE);\n\n      this.onPointerMoveOut(adaptedEvent);\n    });\n\n    this.view.addEventListener(\n      'lostpointercapture',\n      (event: PointerEvent): void => {\n        const adaptedEvent: AdaptedEvent = this.mapEvent(\n          event,\n          EventTypes.CANCEL\n        );\n\n        if (this.trackedPointers.has(adaptedEvent.pointerId)) {\n          // in some cases the `pointerup` event is not fired, but `lostpointercapture` is\n          // we simulate the `pointercancel` event here to make sure the gesture handler stops tracking it\n          this.onPointerCancel(adaptedEvent);\n\n          this.activePointersCounter = 0;\n          this.trackedPointers.clear();\n        }\n      }\n    );\n  }\n\n  protected mapEvent(event: PointerEvent, eventType: EventTypes): AdaptedEvent {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: event.offsetX,\n      offsetY: event.offsetY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType: event.pointerType as PointerType,\n      buttons: event.buttons,\n      time: event.timeStamp,\n    };\n  }\n\n  public resetManager(): void {\n    super.resetManager();\n    this.trackedPointers.clear();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}